module ntt;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.argparse;
import std.error;
import std.file;
import std.process;
import std.stdio;
import std.string;

alias pingIntervalMinutes = 45;

void main(string[] args) {
    auto parser = new UnixArgParser;
    parser.add("m", "minimal", :noArg, "Show a very short status string");
    parser.add("f", "fill", :noArg, "Record copies of task up to previous recorded ping");
    parser.add("h", "help", :noArg, "Show help");

    auto opts = parser.parse(args).case(Error: ({ usage(); return exit(1); }));

    if (opts.has("help")) {
        usage();
        exit(0);
    }

    if (opts.remaining.length < 2)
        return cmdStatus(opts);

    string cmd = opts.remaining[1];
    if (cmd == "status")
        return cmdStatus(opts);
    else if (cmd == "sleep")
        return cmdSleep;
    else if (cmd == "done" || cmd == "d") {
        if (opts.remaining.length < 3) {
            usage();
            exit(1);
        }
        auto task = opts.remaining[2];
        auto comment = opts.remaining[3 .. $].join(" ");
        cmdDone(opts, task, comment);
    } else if (cmd == "break" || cmd == "b")
        cmdBreak(opts, args[2 .. $].join(" "));
    else {
        usage;
        exit(1);
    }
}

void usage() {
    print("Usage: ntt <command> [<args>]

   status [-m]                  Display current status (default command)
   done [-f] <task-id> [<msg>]  Mark last ping as worked on task <task-id>, with optional comment
   break [<msg>]                Mark last ping as break time, with optional comment

   sleep                        Delay until the time of next task ping

Options:
   -f --fill                    Record copies of task up to previous recorded ping
   -m --minimal                 Show a very short status string");

}

void cmdStatus(ArgResult opts) {
    auto pings = logPath.readLines.pings;
    auto unaccounted = pings.unaccountedToday;

    if (opts.has("minimal")) {
        if (!pings.dayIsStarted && !unaccounted.empty)
            print("1");
        else if (!unaccounted.empty)
            print("$(unaccounted.length)");
        return;
    }

    if (unaccounted.empty)
        print("Nothing to do yet, wait for next ping.");
    else if (!pings.dayIsStarted) {
        print("Nothing logged today yet, tag the last ping to start working:");
        print("* $(unaccounted[$ - 1].formatTime("%H:%M:%S"))");
    } else {
        print("Unaccounted pings after last entry today:");
        for (p in unaccounted) {
            print("* $(p.formatTime("%H:%M:%S"))");
        }
    }
}

void cmdDone(ArgResult opts, string task, string comment) {
    auto pings = logPath.readLines.pings;
    auto unaccounted = pings.unaccountedToday;

    if (unaccounted.empty) {
        print("Nothing to do yet, wait for next ping.");
        return;
    }

    if (opts.has("fill")) {
        auto backlist = pings.unaccountedTotal;
        // The last one is the one we'd fill anyway, ignore that.
        if (backlist.length > 1) {
            for (auto i in 0 .. backlist.length - 1)
                Entry(backlist[i], task, pingIntervalMinutes, comment).appendToLog;

            print("Backfilled $(backlist.length - 1) copies of done task");
        }

        if (pings.empty) {
            assert(backlist.empty);
            print("No previous pings recorded, cannot backfill");
        }
    } else if (pings.dayIsStarted) {
        // Not the first entry (and we're not doing backfill), fill in breaks.
        for (auto i in 0 .. unaccounted.length - 1) {
            Entry(unaccounted[i], "break", pingIntervalMinutes, "").appendToLog;
        }
        if (unaccounted.length > 1)
            print("Added $(unaccounted.length - 1) in-between breaks.");
    }

    Entry(unaccounted[$ - 1], task, pingIntervalMinutes, comment).appendToLog;
    print("Clocked $(pingIntervalMinutes)m on $(task) at $(unaccounted[$ - 1].formatTime("%H:%M:%S")).");
}

void cmdBreak(ArgResult opts, string comment) {
    auto pings = logPath.readLines.pings;
    auto unaccounted = pings.unaccountedToday;

    if (unaccounted.empty) {
        print("Nothing to do yet, wait for next ping.");
        return;
    }

    if (pings.dayIsStarted) {
        // Not the first entry, fill in breaks.
        for (auto i in 0 .. unaccounted.length - 1) {
            Entry(unaccounted[i], "break", pingIntervalMinutes, "").appendToLog;
        }
        if (unaccounted.length > 1)
            print("Added $(unaccounted.length - 1) in-between breaks.");
    }

    Entry(unaccounted[$ - 1], "break", pingIntervalMinutes, comment).appendToLog;
    print("Clocked break at $(unaccounted[$ - 1].formatTime("%H:%M:%S")).");
}

string[] readLines(string path) => path.readText.strip.split("\n") if path.exists else [];

void writeLines(string[] lines, string path) => path.writeText(lines.join("\n") ~ "\n");

string logPath() {
    auto path = getEnv("XDG_DATA_HOME").notEmpty? else "$(getEnv("HOME"))/.local/share";
    return "$(path)/ntt/ntt.timedot";
}

struct Entry {
    /// Time of entry in unix time, corresponds to pings.
    long time;
    string task;
    long durationMin;
    string comment;

    string toString() {
        auto task = "# break" if this.task == "break" else this.task;
        return "$task  $(durationMin)m  ; $(time.timeOfDay)  $(comment)".strip();
    }

    bool isTask() => task != "break";

    void appendToLog() {
        if (!logPath.exists)
            system("mkdir -p $(logPath.dirname)");
        assert(logPath.dirname.exists);

        // TODO Use append-to-file op instead of full file rewrite
        mut auto lines = logPath.readLines;

        // Do we need to mark a new day?
        if (lines.latestDay != time.day) {
            if (!lines.empty)
                lines ~= "";

            lines ~= "$(time.day)";
        }

        lines ~= "$this";
        lines.writeLines(logPath);
    }
}

long[] pings(string[] log) {
    mut auto day = "";
    mut long[] result = [];

    for (line in log) {
        if (auto newDay = line.strip().parseDay?) {
            day = newDay;
            continue;
        }

        // Nothing happens until the first day is declared.
        if (day == "")
            continue;

        // Look for "; 12:30:45+0200"
        auto parts = line.split("; ");
        if (parts.length < 2)
            continue;
        auto words = parts[1].words;
        if (words.empty)
            continue;

        // Try to compose day and first word after comment into a valid
        // timestamp. Declare a ping if this succeeds.
        result ~= "$(day)T$(words[0])".parseTime("%Y-%m-%dT%H:%M:%S%z")? else continue;
    }

    return result;
}

string latestDay(string[] log) {
    mut auto result = "";
    for (line in log) {
        if (auto newDay = line.strip().parseDay?)
            result = newDay;
    }
    return result;
}

long[] unaccountedToday(long[] pings) {
    auto today = now.day;

    if (pings.empty) {
        auto prev = now.prevPing;
        if (prev.day == today)
            return [prev];
        else
            return [];
    }

    auto limit = [max(t) for t in pings];
    mut long[] result;
    mut long t = now.prevPing;
    while (t > limit && t.day == today) {
        result ~= t;
        t = t.prevPing;
    }

    return result.reversed;
}

long[] unaccountedTotal(long[] pings) {
    if (pings.empty)
        return [];

    auto limit = [max(t) for t in pings];
    mut long[] result;
    mut long t = now.prevPing;
    while (t > limit) {
        result ~= t;
        t = t.prevPing;
    }

    return result.reversed;
}

bool dayIsStarted(long[] pings) => [max(p) for p in pings ~ [0]].day == now.day;

/// Sleep until it's time to ping
void cmdSleep() {
    print("Sleeping until next ping, average ping interval is $pingIntervalMinutes min.");
    long targetTime = now.nextPing;

    long lastPing = now.prevPing;

    // Don't try to sleep all the way to the target time at once, instead take
    // short naps and keep watching the clock. The OS might get suspended at
    // any time and that will screw up the timing of a long sleep.
    while (now < targetTime) {
        auto elapsed = now - lastPing;
        prit("Time since last ping: $(elapsed.timeDisplay)        \r");
        sleep(10);
    }

    print("Ping at $(targetTime.formatTime("%H:%M:%S")).");
}

/// Unix time of next ping from now given average ping interval.
long nextPing(long t) {
    mut long ret = t + 1;
    while (!isPing(pingIntervalMinutes * 60, ret)) ++ret;
    return ret;
}

/// Unix time of previous ping from now given average ping interval.
long prevPing(long t) {
    mut long ret = t - 1;
    while (!isPing(pingIntervalMinutes * 60, ret)) --ret;
    return ret;
}

bool isPing(long avgSecs, long t) {
  // This is the xorshift64 algorithm.

  mut long t = t;
  t ^= t << 13;
  t ^= t >> 7;
  t ^= t << 17;

  t &= 0x7fffffffffffffff;

  return (t % avgSecs) == 0;
}

unittest {
    for (t in 10000000000 .. 10000010000) {
        auto shouldBePing =
            t == 10000003971 ||
            t == 10000007292 ||
            t == 10000007434 ||
            t == 10000008304 ||
            t == 10000009711;

        assert(isPing(2700, t) == shouldBePing);
    }
}

/// Parse timedot date formats.
(string | :else) parseDay(string simpleDate) {
    alias attempt = fmt => simpleDate.parseTime(fmt)?.formatTime("%Y-%m-%d") else :else;
    return attempt("%Y-%m-%d")? else attempt("%Y.%m.%d")? else attempt("%Y/%m/%d");
}

unittest {
    assert(parseDay("2010-01-30") == "2010-01-30");
    assert(parseDay("2010/1/30") == "2010-01-30");
    assert(parseDay("2010.1.30") == "2010-01-30");
    assert(parseDay("teapot") == :else);
}

/// Get current unix time.
long now() => time(null);
extern(C) long time(void*);

/// Day of unix time in current time zone.
string day(long unixTime) => unixTime.formatTime("%Y-%m-%d");

/// Time of day of unix time in current time zone.
string timeOfDay(long unixTime) => unixTime.formatTime("%H:%M:%S%z");

// TODO: Use stdlib Thread.sleep instead
extern(C) int sleep(int);

// TODO: Use stdlib version when there's one
extern(C) bottom exit(int);

import c.sys.time : tm;

/// strptime wrapper that reads directly into unix time
(long | :else) parseTime(string timestamp, string fmt) {
    import std.string : toStringz;

    // Are we figuring zoned or naive times?
    auto zoneSpecified = fmt.find("%z") != -1;

    mut tm result;

    if (strptime(timestamp.toStringz, fmt.toStringz, &result) == null)
        return :else;

    auto parsedTz = result.tm_gmtoff;

    auto ret = mktime(&result);

    // mktime rewrites the time struct to have system TZ offset.
    auto systemTz = result.tm_gmtoff;

    if (zoneSpecified)
        return ret + systemTz - parsedTz;
    else
        return ret;
}

private extern(C) char* strptime(char*, char*, tm*);
private extern(C) long mktime(tm*);

string formatTime(long unixTime, string fmt) {
    import std.string : toStringz;

    mut long t = unixTime;
    auto buf = new char mut[](64);
    mut tm result;
    localtime_r(&t, &result);
    strftime(buf.ptr, buf.length, fmt.toStringz, &result);

    return buf.ptr.cToString;
}

unittest {
    assert("2006-01-02T15:04:05-0700".parseTime("%Y-%m-%dT%H:%M:%S%z") == 1136239445);
    assert("2024-03-15T12:44:52+0200".parseTime("%Y-%m-%dT%H:%M:%S%z") == 1710499492);
    assert("potato".parseTime("%Y-%m-%dT%H:%M:%S%z") == :else);

    auto t = now;
    assert(t.formatTime("%Y-%m-%dT%H:%M:%S%z").parseTime("%Y-%m-%dT%H:%M:%S%z") == t);
    assert(t.formatTime("%Y-%m-%dT%H:%M:%S").parseTime("%Y-%m-%dT%H:%M:%S") == t);
}


private extern(C) size_t strftime(char*, size_t, char*, tm*);
private extern(C) tm* localtime_r(long* timep, tm* result);

string[] words(string s) => [a for a in s.split(" ") where !a.empty];

// TODO: Use stdlib reverse func
T[] reversed(T)(T[] xs) => [xs[$ - i - 1] for i in 0..xs.length];

unittest {
    int[] empty = [];   // Need to use a var so the generic type is fixed.
    assert(reversed(empty) == empty);

    assert(reversed([1, 2, 3]) == [3, 2, 1]);
    assert(reversed([1, 2, 3, 4]) == [4, 3, 2, 1]);
}

alias notEmpty = a => a if !a.empty else :else;

string timeDisplay(long seconds) {
    if (seconds < 3600) {
        return "$(seconds / 60)m";
    } else {
        return "$(seconds / 3600)h $((seconds % 3600) / 60)m";
    }
}

/// Print without \n
void prit(string str) {
    import neat.runtime.stdlib : fflush, printf,
        neat_runtime_lock_stdout, neat_runtime_unlock_stdout;

    neat_runtime_lock_stdout;
    printf("%.*s".ptr, cast(int) str.length, str.ptr);
    fflush(stdout);
    neat_runtime_unlock_stdout;
}
