module ntt;

macro import std.macro.assert;
macro import std.macro.listcomprehension;

import std.algorithm;
import std.file;
import std.process;
import std.stdio;
import std.string;

alias pingIntervalMinutes = 30;

void main(string[] args) {
    if (args.length < 2 || args[1] == "status")
        return cmdStatus;
    else if (args[1] == "sleep")
        cmdSleep;
    else if (args[1] == "work" || args[1] == "w")
        cmdWork(args[2 .. $]);
    else if (args[1] == "break" || args[1] == "b")
        cmdBreak(args[2 .. $]);
    else
        usage;
}

void usage() {
    print("Usage: ntt <command> [<args>]");
    print("    status                     Display today's work stats (default command)");
    print("    sleep                      Delay until the time of next task ping");
    print("    work ([task] ([message]))  Mark last ping as worked on task");
    print("    break ([message])          Mark last ping as break time");
}

/// Display today's work status.
void cmdStatus() {
    auto log = loadLog;
    auto unaccounted = log.unaccountedPings;

    print("Average ping interval is $pingIntervalMinutes min");
    if (unaccounted.empty) {
        print("Nothing to do yet, wait for next ping");
    } else if (!log.dayIsStarted) {
        print("Nothing logged today yet.");
        print("Last ping was at $(unaccounted[0].formatted)");
    } else {
        print("Unaccounted pings after last entry today:");
        for (p in unaccounted) {
            print("x $(p.formatted)");
        }
    }
}

void cmdWork(string[] args) {
    print("TODO");
}

void cmdBreak(string[] args) {
    print("TODO");
}

Entry[] loadLog() {
    mut Entry[] result;
    for (line in logLines) {
        result ~= Entry.fromString(line)? else continue;
    }
    return result;
}

string[] logLines() => logPath.readText.strip.split("\n") if logPath.exists else [];

string logPath() {
    auto path = getEnv("XDG_DATA_HOME").notEmpty? else "$(getEnv("HOME"))/.local/share";
    return "$(path)/ntt/work.log";
}

struct Entry {
    /// Time of entry in unix time, corresponds to pings.
    string marker;
    long time;
    string task;
    long durationMin;
    string comment;

    static (Entry | :else) fromString(string s) {
        auto words = s.words;
        // Must have marker, timestamp, task and duration.
        if (words.length < 4)
            return :else;
        auto marker = words[0];
        auto time = parseDate(words[1])? else return :else;
        auto task = words[2];
        auto durationMin = words[3].parseScalar("min")? else return :else;

        return Entry(marker, time, task, durationMin, words[4 .. $].join(" "));
    }

    string toString() => "$marker $(time.formatted)  $task  $(durationMin)min  $comment".strip;
}

unittest {
    assert(Entry.fromString("") == :else);
    assert(Entry.fromString("# Some comment dunno") == :else);
    assert(Entry.fromString("x 2024-03-13T10:09:06+0200  ntt.base  15min") ==
        Entry("x", 1710317346, "ntt.base", 15, ""));
    assert(Entry.fromString("x 2024-03-13T10:09:06+0200  ntt.base  15nmin") ==
        :else);
}

/// Pings between latest entry and now (limited to today).
long[] unaccountedPings(Entry[] entries) {
    auto today = now.day;
    auto limit = entries.latest;
    mut long[] result;
    mut long t = now.prevPing;
    while (t > limit && t.day == today) {
        result ~= t;
        t = t.prevPing;
    }

    // TODO result.reverse();
    return result;
}

/// Latest entry timestamp from list.
// TODO: Don't trust that they're sorted, actually look at each.
long latest(Entry[] entries) => entries[$ - 1].time if !entries.empty else 0;

/// Return whether logging has started for today.
bool dayIsStarted(Entry[] entries) => entries.latest.day == now.day;

/// Sleep until it's time to ping
void cmdSleep() {
    print("Sleeping until next ping, average ping interval is $pingIntervalMinutes min");
    long targetTime = now.nextPing;

    // Don't try to sleep all the way to the target time at once, instead take
    // short naps and keep watching the clock. The OS might get suspended at
    // any time and that will screw up the timing of a long sleep.
    while (now < targetTime) {
        sleep(10);
    }

    print("Pinged at $(targetTime.formatted).");
}

/// Unix time of next ping from now given average ping interval.
long nextPing(long t) {
    mut long ret = t + 1;
    while (!isPing(pingIntervalMinutes * 60, ret)) ++ret;
    return ret;
}

/// Unix time of previous ping from now given average ping interval.
long prevPing(long t) {
    mut long ret = t - 1;
    while (!isPing(pingIntervalMinutes * 60, ret)) --ret;
    return ret;
}

bool isPing(long avgSecs, long t) {
  // This is the xorshift64 algorithm.

  mut long t = t;
  t ^= t << 13;
  t ^= t >> 7;
  t ^= t << 17;
  return (t % avgSecs) == 0;
}

string formatted(long unixTime) =>
    "date -d @$unixTime +'%Y-%m-%dT%H:%M:%S%z'".readback.strip;

(long | :else) parseDate(string datestring) {
    if (datestring.strip == "") {
        return :else;
    }

    if (datestring.strip.startsWith("#")) {
        return :else;
    }

    return "date -d $datestring -u +%s".readbackErr.case(
        int i: :else,
        string s: s.parseNum?.(:else if (that <= 0 || that > 99999999999) else that));
}

unittest
{
    assert(parseDate("2006-01-02T15:04:05-0700") == 1136239445);
    assert(parseDate("xyzzy") == :else);
    assert(parseDate("") == :else);
    assert(parseDate("9300-01-01") == :else);
}

long now() => "date +%s".readback.parseNum? else assert(false);

/// Day of unix timestamp in current time zone.
string day(long unixTime) => unixTime.formatted[0 .. 10];

extern(C) int sleep(int);

// A version of readback that handles error code return values.
// FIXME: Replace with a stdlib version once one is available.
(int | string) readbackErr(string command) {
    import std.file : readText, remove;
    import std.string : toStringz;

    auto tmp = tmpnam(null).cToString;
    // XXX: Add hack to pipe stderr to devnull, otherwise date will make noise
    // about bad dates to our stderr.
    int iret = neat_runtime_system_iret(command ~ " > " ~ tmp ~ " 2> /dev/null");
    auto ret = readText(tmp);
    remove(tmp);
    if (iret)
        return iret;
    return ret;
}

private extern(C) char* tmpnam(char*);
private extern(C) int neat_runtime_system_iret(string command);

string[] words(string s) => [a for a in s.split(" ") where !a.empty];

(long | :else) parseScalar(string s, string unit) {
    string scalar = s[0 .. $ - unit.length] if s.endsWith(unit) else return :else;
    return scalar.parseNum;
}

unittest {
    assert("15min".parseScalar("min") == 15);
    assert("".parseScalar("min") == :else);
    assert("15".parseScalar("min") == :else);
    assert("15nmin".parseScalar("min") == :else);
}

/// Robust integer parser.
(long | :else) parseNum(string s) {
    import neat.runtime : atol;

    auto s = s.strip;
    long ret = atol(s);
    return ret if "$ret" == s else :else;
}

unittest {
    assert(parseNum("123") == 123);
    assert(parseNum("-123") == -123);
    assert(parseNum("-") == :else);
    assert(parseNum("") == :else);
    assert(parseNum("123gfp") == :else);
    assert(parseNum("a123") == :else);
}

alias notEmpty = a => a if !a.empty else :else;
